name: Testing Laravel

on:
  pull_request:
    branches: [ main, dev ]

# Define our jobs
jobs:
  laravel-tests:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: secretroot
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # Setup
    steps:
      - uses: actions/checkout@v3
      - name: Update apt
        run: sudo apt-get update
      - name: Install imagick
        run: sudo apt-get install php-imagick
      - uses: actions/setup-node@v3
        with:
          node-version: 22
      - uses: nanasess/setup-php@master
        with:
          php-version: '8.3'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --ignore-platform-req=ext-imagick

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3

        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Compile assets
        run: |
          npm ci
          npm run build

      - name: Execute unit tests via PHPUnit
        env:
          DB_DATABASE: test_db
          DB_USERNAME: user
          DB_PASSWORD: secret
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: vendor/bin/phpunit --testsuite Unit

      - name: Execute feature tests via PHPUnit
        env:
          DB_DATABASE: test_db
          DB_USERNAME: user
          DB_PASSWORD: secret
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: vendor/bin/phpunit --testsuite Feature

      - name: Execute inertia tests via PHPUnit
        env:
          DB_DATABASE: test_db
          DB_USERNAME: user
          DB_PASSWORD: secret
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: vendor/bin/phpunit --testsuite Inertia
